using EnvDTE;
using Microsoft.VisualStudio.Shell;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Rapicgen.Core;
using Rapicgen.Core.Exceptions;
using Rapicgen.Core.Extensions;
using Rapicgen.Core.Generators;
using Rapicgen.Core.Generators.NSwagStudio;
using Rapicgen.Core.Generators.Refitter;
using Rapicgen.Core.Installer;
using Rapicgen.Core.Logging;
using Rapicgen.Core.Options.Refitter;
using Rapicgen.Extensions;
using Rapicgen.Options;
using Rapicgen.Options.General;
using Rapicgen.Options.NSwagStudio;
using Rapicgen.Options.Refitter;
using Rapicgen.Windows;
using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Threading;
using VSLangProj;
using Task = System.Threading.Tasks.Task;

namespace Rapicgen.Commands.AddNew
{
    [ExcludeFromCodeCoverage]
    public abstract class NewRestClientCommand : ICommandInitializer
    {
        protected Guid CommandSet { get; } = new Guid("E4B99F94-D11F-4CAA-ADCD-24302C232938");

        protected virtual int CommandId { get; } = 0x100;
        protected abstract SupportedCodeGenerator CodeGenerator { get; }

        public Task InitializeAsync(AsyncPackage package, CancellationToken token)
            => package.SetupCommandAsync(
                CommandSet,
                CommandId,
                ExecuteAsync,
                token);

        private async Task ExecuteAsync(DTE dte, AsyncPackage package)
        {
            try
            {
                await OnExecuteAsync(dte, package);
            }
            catch (Exception e)
            {
                throw new AddNewCommandException(GetType().Name, e);
            }
        }

        private async Task OnExecuteAsync(DTE dte, AsyncPackage package)
        {
            Logger.Instance.TrackFeatureUsage($"New REST API Client ({CodeGenerator.GetName()})");

            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();

            var result = EnterOpenApiSpecDialog.GetResult();
            if (result == null)
                return;

            var selectedItem = ProjectExtensions.GetSelectedItem();
            if (selectedItem == null)
            {
                Logger.Instance.WriteLine("Nothing is selected");
                return;
            }

            var folder = FindFolder(selectedItem, dte);
            if (string.IsNullOrWhiteSpace(folder))
            {
                Logger.Instance.WriteLine("Unable to get folder name");
                return;
            }

            var contents = result.OpenApiSpecification;
            var filename = $"{result.OutputFilename}{Path.GetExtension(result.Url).ToLowerInvariant()}";
            var outputNamespace = dte.GetActiveProject()?.GetTopLevelNamespace();
            var filePath = Path.Combine(folder, filename);
            File.WriteAllText(filePath, contents);

            if (CodeGenerator == SupportedCodeGenerator.NSwagStudio)
            {
                contents = await NSwagStudioFileHelper.CreateNSwagStudioFileAsync(
                    result,
                    new NSwagStudioOptions(),
                    outputNamespace);

                filename = filename.Replace(".json", ".nswag")
                                   .Replace(".yaml", ".nswag")
                                   .Replace(".yml", ".nswag");
            }

            if (CodeGenerator == SupportedCodeGenerator.Refitter)
            {
                contents = GetRefitterFileContent(result.Url);

                filename = filename.Replace(".json", ".refitter")
                                   .Replace(".yaml", ".refitter")
                                   .Replace(".yml", ".refitter");
            }

            filePath = Path.Combine(folder, filename);
            File.WriteAllText(filePath, contents);

            var project = dte.GetActiveProject();
            if (project != null)
            {
                await SetCustomToolAsync(dte, project, folder, filePath, contents);
                await OnInstallPackagesAsync(package, project, result);
            }
        }

        private static string GetRefitterFileContent(string openApiPath)
        {
            var options = new OptionsFactory()
                .Create<IRefitterOptions, RefitterOptionsPage, DefaultRefitterOptions>();

            var settings = new
            {
                openApiPath,
                addAutoGeneratedHeader = options.AddAutoGeneratedHeader,
                generateContracts = options.GenerateContracts,
                generateXmlDocCodeComments = options.GenerateXmlDocCodeComments,
                returnIApiResponse = options.ReturnIApiResponse,
                useCancellationTokens = options.UseCancellationTokens,
                generateOperationHeaders = options.GenerateHeaderParameters,
                generateMultipleFiles = options.GenerateMultipleFiles
            };

            return JsonConvert
                .SerializeObject(
                    settings,
                    new JsonSerializerSettings
                    {
                        Formatting = Formatting.Indented,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    });
        }

        private async Task SetCustomToolAsync(DTE dte, Project project, string folder, string filePath, string contents)
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();

            var fileInfo = new FileInfo(filePath);
            var projectItem = project.AddFileToProject(dte, fileInfo, "None");
            if (projectItem == null)
            {
                return;
            }

            projectItem.Properties.Item("BuildAction").Value = prjBuildAction.prjBuildActionNone;

            if (CodeGenerator == SupportedCodeGenerator.NSwagStudio)
            {
                var generator = new NSwagStudioCodeGenerator(
                    filePath,
                    new CustomPathOptions(),
                    new ProcessLauncher(),
                    new DependencyInstaller(
                        new NpmInstaller(new ProcessLauncher()),
                        new FileDownloader(new WebDownloader()),
                        new ProcessLauncher()));

                generator.GenerateCode(null!);

                dynamic nswag = JsonConvert.DeserializeObject(contents)!;
                var nswagOutput = nswag.codeGenerators.swaggerToCSharpClient.output.ToString();
                project.AddFileToProject(dte, new FileInfo(Path.Combine(folder, nswagOutput)));
            }
            else if (CodeGenerator == SupportedCodeGenerator.Refitter)
            {
                var codeGenerator = new RefitterCodeGenerator(
                    filePath, 
                    default, 
                    new ProcessLauncher(),
                    new DependencyInstaller(
                        new NpmInstaller(new ProcessLauncher()),
                        new FileDownloader(new WebDownloader()),
                        new ProcessLauncher()),
                    new DefaultRefitterOptions());
                codeGenerator.GenerateCode(null);
            }
            else
            {
                var customTool = CodeGenerator.GetCustomToolName();
                projectItem.Properties.Item("CustomTool").Value = customTool;
            }
        }

        protected virtual async Task OnInstallPackagesAsync(
            AsyncPackage package,
            Project project,
            EnterOpenApiSpecDialogResult dialogResult)
        {
            await project.InstallMissingPackagesAsync(package, CodeGenerator);
        }

        private static string? FindFolder(object item, DTE dte)
        {
            ThreadHelper.ThrowIfNotOnUIThread();

            switch (item)
            {
                case ProjectItem projectItem:
                    return (File.Exists(projectItem.FileNames[1])
                        ? Path.GetDirectoryName(projectItem.FileNames[1])
                        : projectItem.FileNames[1])!;

                case Project project:
                    return project.GetRootFolder(dte);

                default:
                    return null;
            }
        }
    }
}