using System;
using System.IO;
using Rapicgen.Core;
using Rapicgen.Core.Generators;
using Rapicgen.Core.Options.Refitter;

namespace Rapicgen.CLI.Commands.CSharp
{
    public class RefitterCommand : CodeGeneratorCommand, IRefitterOptions
    {
        private readonly IRefitterCodeGeneratorFactory codeGeneratorFactory;

        public RefitterCommand(
            IConsoleOutput console,
            IProgressReporter? progressReporter,
            IRefitterCodeGeneratorFactory codeGeneratorFactory)
            : base(console, progressReporter)
        {
            this.codeGeneratorFactory = codeGeneratorFactory ?? throw new ArgumentNullException(nameof(codeGeneratorFactory));
        }

        public override ICodeGenerator CreateGenerator()
        {
            // If SettingsFile is provided, use it as the swagger file
            if (!string.IsNullOrEmpty(SettingsFile))
            {
                SwaggerFile = SettingsFile;
            }
            
            return codeGeneratorFactory.Create(
                SwaggerFile,
                DefaultNamespace,
                this);
        }

        // IRefitterOptions implementation
        public string SettingsFile { get; set; } = string.Empty;
        public bool GenerateContracts { get; set; } = true;
        public string? GeneratedFileName { get; set; }
        public bool AddAutoGeneratedHeader { get; set; } = true;
        public bool TrimUnusedSchema { get; set; } = false;
        public bool KeepSchemaPatterns { get; set; } = false;
        public string? MultipleFiles { get; set; }
        public bool UseCancellationTokens { get; set; } = false;
        public bool UseIsoDateFormat { get; set; } = false;
        public bool UseOperationHeaders { get; set; } = true;
        public bool UsePolly { get; set; } = false;
        public int PollyMaxRetryCount { get; set; } = 6;
        public double PollyFirstBackoffRetryInSeconds { get; set; } = 1.0;
        public bool ReturnIApiResponse { get; set; } = false;
        public bool ResponseWrapping { get; set; } = false;
        public bool UseHttpClientFactory { get; set; } = false;
        public bool GenerateClientInterfaces { get; set; } = true;
        public string ImmutableRecords { get; set; } = string.Empty;
        public bool UseDynamicQuerystringParameters { get; set; } = false;
        public string Namespace { get; set; } = "GeneratedCode";
        public bool DependencyInjectionSettings { get; set; } = false;
        public bool GenerateXmlDocCodeComments { get; set; } = true;
        public bool GenerateInternalTypes { get; set; } = false;
        public bool GenerateHeaderParameters { get; set; } = true;
        public bool GenerateMultipleFiles { get; set; } = false;
    }
}